var ApplicationContext=function(_,LoggerFactory,ConfigFactory){function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var ___default=_interopDefaultLegacy(_),LoggerFactory__default=_interopDefaultLegacy(LoggerFactory),ConfigFactory__default=_interopDefaultLegacy(ConfigFactory);class Context{constructor(components,profile){this.components=components||[],this.components=___default.isArray(this.components)?this.components:[this.components],this.profile=profile}}class Component{constructor(options){this.Reference=options?.Reference||(options.factory||options.wireFactory?null:options),this.name=options?.name,this.qualifier=options?.qualifier,this.scope=options?.scope,this.properties=options?.properties,this.profiles=options?.profiles,this.factory=options?.factory,this.factoryFunction=options?.factoryFunction,this.factoryArgs=options?.factoryArgs,this.wireFactory=options?.wireFactory,this.isActive=!0,this.instance=null,this.isClass=!1,this.require=null}}class Scopes{static SINGLETON="singleton";static SERVICE="singleton";static PROTOTYPE="prototype";static TRANSIENT="prototype"}class ApplicationContext{static DEFAULT_CONTEXT_NAME="default";static DEFAULT_CONFIG_CONTEXT_PATH="context";static getGlobalRef(){let $globalref=null;return $globalref=ApplicationContext.detectBrowser()?window:global,$globalref}static getGlobalRoot(key){const $globalref=ApplicationContext.getGlobalRef();let $key=$globalref&&$globalref.boot;return $key=$key&&$key.contexts,$key=$key&&$key.root,$key=$key&&$key[`${key}`],$key}static detectBrowser(){return!("undefined"==typeof window)}constructor(options){const contexts=options?.contexts||options;Array.isArray(contexts)?this.contexts=contexts:this.contexts=contexts?[contexts]:[],this.components={},this.profiles=options?.profiles,this.name=options?.name||ApplicationContext.DEFAULT_CONTEXT_NAME,this.configContextPath=options?.configContextPath||"undefined"!=typeof process&&process?.env?.NODE_CONFIG_CONTEXT_PATH||ApplicationContext.DEFAULT_CONFIG_CONTEXT_PATH,this.config=options?.config||ConfigFactory__default.getConfig({}),options?.config&&delete options.config,options?.profiles&&delete options.profiles,options?.configContextPath&&delete options.configContextPath,this.logger=LoggerFactory__default.getLogger("@alt-javascript/cdi/ApplicationContext",this.config)}async start(){await this.lifeCycle()}async lifeCycle(){return this.logger.verbose(`ApplicationContext (${this.name}) lifecycle started.`),await this.parseContexts(),this.createSingletons(),this.injectSingletonDependencies(),this.initialiseSingletons(),this.registerSingletonDestroyers(),this.run()}detectConfigContext(){this.logger.verbose("Detecting config contexts started."),this.config&&this.config.has(this.configContextPath)&&(this.logger.verbose(`Detected config context at ${this.configContextPath}, adding context.`),this.contexts.push(this.config.get(this.configContextPath))),this.logger.verbose("Detecting config contexts completed.")}detectGlobalContextComponents(){this.logger.verbose("Detecting global context components started."),!this.components.config&&ApplicationContext.getGlobalRoot("config")&&this.deriveContextComponent({Reference:ApplicationContext.getGlobalRoot("config"),name:"config"}),!this.components.loggerFactory&&ApplicationContext.getGlobalRoot("loggerFactory")&&this.deriveContextComponent({Reference:ApplicationContext.getGlobalRoot("loggerFactory"),name:"loggerFactory"}),!this.components.loggerCategoryCache&&ApplicationContext.getGlobalRoot("loggerCategoryCache")&&this.deriveContextComponent({Reference:ApplicationContext.getGlobalRoot("loggerCategoryCache"),name:"loggerCategoryCache"}),this.components.logger||this.deriveContextComponent({scope:Scopes.PROTOTYPE,wireFactory:"loggerFactory",factoryFunction:"getLogger",name:"logger"}),!this.components.fetch&&ApplicationContext.getGlobalRoot("fetch")&&this.deriveContextComponent({Reference:ApplicationContext.getGlobalRoot("fetch"),name:"fetch"}),this.logger.verbose("Detecting global context components completed.")}async parseContexts(){this.logger.verbose("Parsing configured contexts started."),this.detectConfigContext();for(let i=0;i<this.contexts.length;i++){if(!this.contexts[i]){const msg=`ApplicationContext (${this.name}) received a nullish context.`;throw this.logger.error(msg),new Error(msg)}"Context"===this.contexts[i]?.constructor?.name?await this.parseContextComponents(this.contexts[i]):await this.parseContextComponents(new Context(this.contexts[i]))}this.detectGlobalContextComponents(),this.logger.verbose("Parsing configured contexts completed.")}async deriveContextComponent(contextComponent){if(contextComponent.name||contextComponent.Reference||contextComponent.factory)await this.parseContextComponent(contextComponent);else{const contextKeys=Object.keys(contextComponent);for(let i=0;i<contextKeys.length;i++){const name=contextKeys[i],component=contextComponent[name];component.name=name,await this.parseContextComponent(component)}}}async parseContextComponents(context){if(this.logger.verbose("Processing context components started"),context.components&&Array.isArray(context.components))for(let i=0;i<context.components.length;i++)await this.deriveContextComponent(context.components[i]);this.logger.verbose("Processing context components completed")}async parseContextComponent(componentArg){let component=componentArg;"Component"!==component?.constructor?.name&&"Singleton"!==component?.constructor?.name&&"Prototype"!==component?.constructor?.name&&(component=new Component(component,component.name,component.qualifier,component.scope,component.properties,component.profiles),component.require=componentArg.require);const constructr=component?.Reference?.prototype?.constructor,$component={};if($component.isClass=void 0!==constructr,$component.name=___default.lowerFirst(component.name)||___default.lowerFirst(constructr.name),$component.qualifier=component.qualifier||___default.lowerFirst(constructr?.qualifier),$component.scope=component.scope||___default.lowerFirst(constructr?.scope)||Scopes.SINGLETON,$component.Reference=component.Reference,$component.factory=component.factory,$component.factoryFunction=component.factoryFunction,$component.factoryArgs=component.factoryArgs,$component.wireFactory=component.wireFactory,component.require)try{let module=await import(component.require);$component.Reference=module.default,$component.isClass=void 0!==$component?.Reference?.prototype?.constructor}catch(err){this.logger.error(err)}$component.properties=component.properties||constructr?.properties,$component.profiles=component.profiles||constructr?.profiles,$component.profiles||($component.profiles=[]),"string"==typeof $component.profiles&&($component.profiles=$component.profiles.split(",")),$component.isActive=0===$component.profiles.length;const activeProfiles=this.profiles?.split(",")||[];if(activeProfiles.length>0&&!$component.isActive&&($component.isActive=___default.intersection(activeProfiles,$component.profiles).length>0,!1===$component.isActive)){let negations=___default.filter($component.profiles,(profile=>profile.startsWith("!")));negations=___default.map(negations,(profile=>profile.substring(1))),$component.isActive=negations.length>0&&0===___default.intersection(activeProfiles,negations).length}if($component.isActive){if(this.components[$component.name]){const msg=`Duplicate definition of application context component (${$component.name})`;throw this.logger.error(msg),new Error(msg)}this.components[$component.name]=$component,this.logger.verbose(`Added application context component (${$component.name}) with ${$component.scope} scope`)}else this.logger.verbose(`Skipped inactive application context component (${$component.name}), with scope ${$component.scope}`)}createSingletons(){this.logger.verbose("Creating singletons started");const keys=Object.keys(this.components);for(let i=0;i<keys.length;i++){const component=this.components[keys[i]];if(component.scope===Scopes.SINGLETON){if(component.isClass)component.instance=new component.Reference;else if("function"==typeof component.factory){let args=component.factoryArgs;Array.isArray(args)||(args=[args]),component.instance=new component.factory(...args)}else component.instance=component.Reference;this.logger.verbose(`Created singleton (${component.name})`)}}this.logger.verbose("Creating singletons completed")}resolveConfigPlaceHolder(placeholderArg){const tuple=placeholderArg.substring(2,placeholderArg.length-1).split(":"),path=tuple[0],defaultValue=tuple[1]||void 0;let returnValue=null;try{returnValue=this.config.get(path,defaultValue?JSON.parse(defaultValue):defaultValue)}catch(e){const msg=`Failed to resolve placeholder component property value (${path}) from config.`;throw this.logger.error(msg),new Error(msg)}return returnValue}autowireComponentDependencies(instance,component){const insKeys=Object.keys(instance);for(let j=0;j<insKeys.length;j++){const property=instance[insKeys[j]];if("Autowired"===property?.name||"autowired"===("string"==typeof property&&___default.lowerCase(property)))instance[insKeys[j]]=this.get(insKeys[j],void 0,component),this.logger.verbose(`Explicitly autowired component (${component.name}) property (${insKeys[j]}) from context.`);else if(null==instance[insKeys[j]])instance[insKeys[j]]=this.get(insKeys[j],instance[insKeys[j]]||null,component),null!=instance[insKeys[j]]&&this.logger.verbose(`Implicitly autowired null component (${component.name}) property (${insKeys[j]}) from context.`);else if("string"==typeof instance[insKeys[j]]&&instance[insKeys[j]].startsWith("${")){try{instance[insKeys[j]]=this.resolveConfigPlaceHolder(instance[insKeys[j]])}catch(e){const msg=`Failed to explicitly autowired placeholder component (${component.name}) property value (${insKeys[j]}) from config.`;throw this.logger.error(msg),new Error(msg)}this.logger.verbose(`Explicitly autowired placeholder component (${component.name}) property value (${insKeys[j]}) from config.`)}}}wireComponentProperty(component,propertyArg){let property=propertyArg;"Property"!==propertyArg?.constructor?.name&&(property=new class{constructor(options){this.name=options?.name,this.reference=options?.ref||options?.reference,this.value=options?.value,this.defaultValue=options?.defaultValue}},property.name=propertyArg.name,property.reference=propertyArg?.reference,property.value=propertyArg?.value,property.path=propertyArg?.path,property.defaultValue=propertyArg?.defaultValue,property.factory=propertyArg?.factory,property.function=propertyArg?.function,property.args=propertyArg?.args),"string"==typeof property.name&&(property.reference&&(component.instance[property.name]=this.get(property.reference,void 0,component),this.logger.verbose(`Explicitly wired component (${component.name}) property (${property.name}) with context reference (${property.reference}).`)),property.value&&(component.instance[property.name]=property.value,this.logger.verbose(`Explicitly wired component (${component.name}) property (${property.name}) with value (${property.value}).`)),property.path&&(component.instance[property.name]=this.config.get(property.path,property.defaultValue),this.logger.verbose(`Explicitly wired component (${component.name}) property (${property.name}) from config path (${property.path}).`)))}wireComponentDependencies(component){if(component.properties){Array.isArray(component.properties)||(component.properties=[component.properties]);for(let i=0;i<component.properties.length;i++)this.wireComponentProperty(component,component.properties[i])}}injectSingletonDependencies(){this.logger.verbose("Injecting singletons dependencies started");const keys=Object.keys(this.components);for(let i=0;i<keys.length;i++){const component=this.components[keys[i]];component.scope===Scopes.SINGLETON&&(this.autowireComponentDependencies(component.instance,component),this.wireComponentDependencies(component))}this.logger.verbose("Injecting singleton dependencies completed")}initialiseSingletons(){this.logger.verbose("Initialising singletons started");const keys=Object.keys(this.components);for(let i=0;i<keys.length;i++){const component=this.components[keys[i]];component.scope===Scopes.SINGLETON&&("function"==typeof component.instance.init?component.instance.init():"string"==typeof component.init&&component.instance[component.init](),this.logger.verbose(`Initialised singleton (${component.name})`))}this.logger.verbose("Initialising singletons completed")}static registerDestroyer(destroyer){"undefined"!=typeof process&&destroyer&&(process.on("SIGINT",destroyer?.bind()),process.on("SIGUSR1",destroyer?.bind()),process.on("SIGUSR2",destroyer?.bind()),process.on("uncaughtException",destroyer?.bind()))}async registerSingletonDestroyers(){this.logger.verbose("Registering singleton destroyers started");const keys=Object.keys(this.components);for(let i=0;i<keys.length;i++){const component=this.components[keys[i]];if(component.scope===Scopes.SINGLETON){let destroyer=null;"function"==typeof component.instance.destroy?destroyer=()=>component.instance.destroy(component.instance):"string"==typeof component.destroy&&(destroyer=()=>component.instance[component.destroy](component.instance)),ApplicationContext.registerDestroyer(destroyer),this.logger.verbose(`Registering singleton (${component.name}) destroyer`)}}ApplicationContext.registerDestroyer((()=>{this.logger.verbose(`ApplicationContext (${this.name}) lifecycle completed.`)})),this.logger.verbose("Registering singleton destroyers completed")}async run(){const keys=Object.keys(this.components);for(let i=0;i<keys.length;i++){const component=this.components[keys[i]];component.scope===Scopes.SINGLETON&&("function"==typeof component.instance.run?component.instance.run():"string"==typeof component.run&&component.instance[component.run]())}this.logger.verbose("Application context started")}get(reference,defaultValue,targetArgs){if(this.components[reference]){if(this.logger.verbose(`Found component (${reference})`),this.components[reference].scope===Scopes.SINGLETON)return this.logger.verbose(`Component (${reference}) is scoped as (${Scopes.SINGLETON}), returning existing instance.`),this.components[reference].instance;let prototype=null;if(this.components[reference].isClass)this.logger.verbose(`Component (${reference}) is scoped as (${Scopes.PROTOTYPE}), returning new instance.`),prototype=new this.components[reference].Reference;else if("function"==typeof this.components[reference].Reference){let args=targetArgs||this.components[reference].factoryArgs;Array.isArray(args)||(args=[args]),prototype=this.components[reference].Reference(...args)}else if("function"==typeof this.components[reference].factory){let args=this.components[reference].factoryArgs;Array.isArray(args)||(args=[args]),prototype=this.components[reference].factory(...args)}else if("string"==typeof this.components[reference].factory&&"string"==typeof this.components[reference].factoryFunction){let args=this.components[reference].factoryArgs;Array.isArray(args)||(args=[args]),prototype=this.get(this.components[reference].factory)[this.components[reference].factoryFunction](...args)}else if("function"==typeof this.components[reference].wireFactory){let args=targetArgs;Array.isArray(args)||(args=[args]),prototype=this.components[reference].wireFactory(...args)}else if("string"==typeof this.components[reference].wireFactory&&"string"==typeof this.components[reference].factoryFunction){let args=targetArgs;Array.isArray(args)||(args=[args]);prototype=this.get(this.components[reference].wireFactory)[this.components[reference].factoryFunction](...args)}else this.logger.verbose(`Component (${reference}) is scoped as (${Scopes.PROTOTYPE}), returning deep clone.`),prototype=___default.cloneDeep(this.components[reference].Reference);return this.autowireComponentDependencies(prototype,this.components[reference]),prototype}if(void 0===defaultValue){const msg=`Failed component reference lookup for (${reference})`;throw this.logger.error(msg),new Error(msg)}return defaultValue}}return ApplicationContext}(_,LoggerFactory,ConfigFactory);